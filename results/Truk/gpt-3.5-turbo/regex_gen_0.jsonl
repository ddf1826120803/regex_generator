{"index": 9394, "description": "lines that contain a character, the string \"dog\", and a vowel\n", "truth regex": ".*(.)&(dog)&([AEIOUaeiou]).*\n", "gpt3 inference regex": "^(?=.*[aeiou]).*dog.*$"}
{"index": 898, "description": "lines with the strings 'dog' and 'truck' and a capital letter before a character\n", "truth regex": "((dog)&([A-Z])&(truck)).*(.).*\n", "gpt3 inference regex": "^[A-Z].*(dog|truck).*"}
{"index": 2398, "description": "lines with the string 'truck' after the string 'dog', a character, or a letter\n", "truth regex": "((dog)|(.)|([A-Za-z])).*(truck).*\n", "gpt3 inference regex": "/(dog|.|[a-zA-Z])truck/"}
{"index": 5906, "description": "lines starting in 5 or more vowels before a number\n", "truth regex": "((([AEIOUaeiou]){5,})(.*)).*([0-9]).*\n", "gpt3 inference regex": "^[aeiou]{5,}\\d.*"}
{"index": 2343, "description": "lines which are containing words with a vowel before a number\n", "truth regex": ".*\\b([AEIOUaeiou]).*([0-9]).*\\b.*\n", "gpt3 inference regex": "\\b[a-zA-Z]*[aeiouAEIOU][0-9]+\\b"}
{"index": 8225, "description": "lines that contain the string 'dog' and more than two times preceding lower-case letters.\n", "truth regex": "((dog){2,}).*([a-z]).*\n", "gpt3 inference regex": "^(?=.*[a-z]{2,}).*dog.*$"}
{"index": 5506, "description": "lines starting with string 'dog' or string 'truck' before a character\n", "truth regex": "((dog)|((truck).*(.).*))(.*)\n", "gpt3 inference regex": "^(dog|truck).*"}
{"index": 6451, "description": "lines that contain a vowel or 7 or more numbers\n", "truth regex": "(\\b([AEIOUaeiou])|([0-9])\\b){7,}\n", "gpt3 inference regex": "^(?=.*[aeiouAEIOU])[a-zA-Z0-9]*[0-9]{7,}.*$"}
{"index": 2670, "description": "lines without the string 'dog', lower-case letter, or vowel\n", "truth regex": "~((dog)&([a-z])&([AEIOUaeiou]))\n", "gpt3 inference regex": "^(?!.*dog)(?!.*[aeiou])[a-z]+$"}
{"index": 3497, "description": "lines with a lower-case letter or number\n", "truth regex": "(([a-z])|([0-9]))(.*)\n", "gpt3 inference regex": "^[a-z0-9]+$"}
{"index": 1087, "description": "lines with a capital or lower-case letter before 'dog'\n", "truth regex": "(.*[A-Z].*)|(([a-z]).*(dog).*)\n", "gpt3 inference regex": "^[a-zA-Z]dog$"}
{"index": 1819, "description": "lines having a vowel before a small letter\n", "truth regex": "([AEIOUaeiou]).*(~([A-Z])).*\n", "gpt3 inference regex": "(?i)[aeiou][a-z]"}
{"index": 2308, "description": "lines with 6 or more letters\n", "truth regex": "([A-Za-z]){6,}\n", "gpt3 inference regex": "^[a-zA-Z]{6,}$"}
{"index": 6084, "description": "lines that have either a letter before a capitial letter or the string 'dog;\n", "truth regex": "((dog)|([0-9])|([A-Za-z])).*([A-Z]).*\n", "gpt3 inference regex": "([a-zA-Z][A-Z])|dog"}
{"index": 3724, "description": "lines having a vowel and the string 'dog'\n", "truth regex": ".*([AEIOUaeiou])&(dog).*\n", "gpt3 inference regex": "^(?=.*[aeiou]).*dog.*$"}
{"index": 3184, "description": "lines do not contain a character, a lower-case letter, or the string 'dog'\n", "truth regex": "~((.)|([a-z])|(dog))\n", "gpt3 inference regex": "^(?!.*[a-z])(?!.*dog).*$"}
{"index": 6387, "description": "lines containing words with, number, character and letter\n", "truth regex": "\\b([0-9])&(.)&([A-Za-z])\\b\n", "gpt3 inference regex": "^(?=.*\\d)(?=.*[a-zA-Z])(?=.*[!@#$%^&*()-=_+])[a-zA-Z\\d!@#$%^&*()-=_+]+$"}
{"index": 3728, "description": "lines with the string truck after the string 'dog' or a letter\n", "truth regex": "((dog)|([A-Za-z])).*(truck).*\n", "gpt3 inference regex": "/(dog|[\\w])\\w*truck/"}
{"index": 2702, "description": "multiple lines containing a vowel repeated 6 times\n", "truth regex": "([AEIOUaeiou]){6,}\n", "gpt3 inference regex": "^(?=.*[aeiou]{6}).*$"}
{"index": 7883, "description": "lines with 6 or more capital letters before string 'dog'\n", "truth regex": "(([A-Z]){6,}).*(dog).*\n", "gpt3 inference regex": "^[A-Z]{6,}.*dog$"}
{"index": 2930, "description": "lines containing 2 or more numbers and a character\n", "truth regex": "\\b(([0-9]){2,})&(.)\\b\n", "gpt3 inference regex": "^\\d+.*\\d+.*[a-zA-Z]"}
{"index": 5988, "description": "lines starting with string 'dog' or either a number, character, or letter\n", "truth regex": "((dog)|(([0-9])|(.)|([A-Za-z])))(.*)\n", "gpt3 inference regex": "^(dog|\\d|\\w).*$"}
{"index": 4890, "description": "lines with a vowel at least once before a letter in them\n", "truth regex": "(([AEIOUaeiou])+).*([A-Za-z]).*\n", "gpt3 inference regex": "^(?=.*[aeiou])[a-zA-Z]+[a-zA-Z]*$"}
{"index": 6718, "description": "lines with a capital letter, number, or string 'dog'\n", "truth regex": ".*([A-Z])|([0-9])|(dog).*\n", "gpt3 inference regex": "^(?=.*[A-Z])(?=.*\\d)|dog$"}
{"index": 5423, "description": "Items with an upper case letter preceding a character at least thrice.\n", "truth regex": "([A-Z]).*((.){3,}).*\n", "gpt3 inference regex": "[A-Z].{3,}"}
{"index": 3213, "description": "Items with any letter at least five times.\n", "truth regex": "(([a-z])|([A-Z])){5,}\n", "gpt3 inference regex": "^(?=.*[a-zA-Z].*[a-zA-Z].*[a-zA-Z].*[a-zA-Z].*[a-zA-Z])[a-zA-Z]+$"}
{"index": 3017, "description": "lines which are  having a letter, a vowel, and the string 'dog' before a number\n", "truth regex": "(([A-Za-z])&([AEIOUaeiou])&(dog)).*([0-9]).*\n", "gpt3 inference regex": "^[a-zA-Z]*[aeiouAEIOU]+.*dog.*\\d+$"}
{"index": 382, "description": "lines with 6 or more numbers before a letter\n", "truth regex": "(([0-9]){6,}).*([A-Za-z]).*\n", "gpt3 inference regex": "^\\d{6,}[a-zA-Z]"}
{"index": 4237, "description": "lines that do not contain a number or a letter\n", "truth regex": "~(([0-9])&([A-Za-z]))\n", "gpt3 inference regex": "^[^a-zA-Z0-9]+$"}
{"index": 4721, "description": "lines with a capital letter before a lower-case letter followed by a character\n", "truth regex": "([A-Z].*[a-z].*).*(.).*\n", "gpt3 inference regex": "^[A-Z][a-z].*$"}
{"index": 9547, "description": "lines with the string 'dog' after a number at least zero times\n", "truth regex": "(([0-9])*).*(dog).*\n", "gpt3 inference regex": "^\\d*dog"}
{"index": 9477, "description": "lines with lower-case letter at least once before character or  string 'dog'\n", "truth regex": "(([a-z])+).*((.)|(dog)).*\n", "gpt3 inference regex": "/[a-z]+.*dog/"}
{"index": 4795, "description": "lines with words ending with a letter before string 'dog'\n", "truth regex": "\\b(.*)([A-Za-z].*dog.*)\\b\n", "gpt3 inference regex": "\\b\\w+[a-z]dog\\b"}
{"index": 4747, "description": "lines that start with the string 'dog' or 2 or more numbers\n", "truth regex": "((dog)(.*))|(([0-9]){2,})\n", "gpt3 inference regex": "^(dog|\\d{2,}).*"}
{"index": 9366, "description": "lines containing a number after a character\n", "truth regex": ".*(.).*([0-9]).*.*\n", "gpt3 inference regex": "/[a-zA-Z]\\d+/"}
{"index": 5334, "description": "Items with a vowel preceding a letter at least four times.\n", "truth regex": "([AEIOUaeiou].*[A-Za-z].*){4,}\n", "gpt3 inference regex": "/[aeiou][a-z]{4,}/"}
{"index": 6652, "description": "lines having a character, lower-case, or 'dog' before a number\n", "truth regex": "((.)|([a-z])|(dog)).*([0-9]).*\n", "gpt3 inference regex": "/[a-z]|dog\\d+/"}
{"index": 9032, "description": "lines with a character or starting in capital letter\n", "truth regex": "(.*..*)|(([A-Z])(.*))\n", "gpt3 inference regex": "^[A-Z].*|.*[A-Z].*$"}
{"index": 580, "description": "lines with 2 or more of a letter before a capital letter\n", "truth regex": "([A-Za-z].*[A-Z].*){2,}\n", "gpt3 inference regex": "/([a-zA-Z])\\1+[A-Z]/"}
{"index": 9491, "description": "lines that start with a number followed by a letter\n", "truth regex": "(([0-9])(.*)).*([A-Za-z]).*\n", "gpt3 inference regex": "^[0-9][a-zA-Z].*"}
{"index": 6526, "description": "lines with 4 or more of a vowel before string 'dog' or 'truck'\n", "truth regex": "([AEIOUaeiou].*dog.*)|((truck){4,})\n", "gpt3 inference regex": "^(.*[aeiou]){4,}(dog|truck).*$"}
{"index": 4346, "description": "Lines with 3 or less capital letters in them\n", "truth regex": "~(([A-Z]){3,})\n", "gpt3 inference regex": "^[^A-Z]*[A-Z]{0,3}[^A-Z]*$"}
{"index": 4974, "description": "lines in which the string 'dog' is followed by a letter, a character, and a 'truck' string\n", "truth regex": "(dog).*(([A-Za-z])&(.)&(truck)).*\n", "gpt3 inference regex": "/dog[a-zA-Z].*truck/"}
{"index": 7913, "description": "lines do not contain 5 or more capital letters\n", "truth regex": "~(([A-Z]){5,})\n", "gpt3 inference regex": "^(?!(.*[A-Z]){5,}).*$"}
{"index": 5611, "description": "lines with a letter occuring six or more times before a character\n", "truth regex": "(([A-Za-z]){6,}).*(.).*\n", "gpt3 inference regex": "^[a-zA-Z]{6,}.*"}
{"index": 8480, "description": "lines with zero or more of the string 'dog' or starting in string 'truck'\n", "truth regex": "((dog)|((truck)(.*)))*\n", "gpt3 inference regex": "^(truck|.*dog)*$"}
{"index": 6625, "description": "lines containing 0 numbers\n", "truth regex": "~([0-9])\n", "gpt3 inference regex": "^\\D*0\\D*$"}
{"index": 5615, "description": "Lines without a lower case\n", "truth regex": ".*~([a-z]).*\n", "gpt3 inference regex": "^[^a-z]*$"}
{"index": 5602, "description": "lines starting with words with 2 or more vowels\n", "truth regex": "(\\b([AEIOUaeiou]){2,}\\b)(.*)\n", "gpt3 inference regex": "^\\b(?=[^aeiou]*[aeiou]){2,}\\w+.*"}
{"index": 4857, "description": "lines that have 'dog' or 6 or more letters\n", "truth regex": "((.*dog.*)|([A-Za-z])){6,}\n", "gpt3 inference regex": "^(?=.*dog)(?=.*\\w{6,}).*$"}
{"index": 6734, "description": "lines that contain a capital letter or the string 'dog' and a number\n", "truth regex": ".*([A-Z])|((dog)&([0-9])).*\n", "gpt3 inference regex": "^(?=.*[A-Z]|dog)(?=.*\\d).*$"}
{"index": 8451, "description": "lines with words that have the string 'dog' at least 3 times\n", "truth regex": "\\b(.*dog.*){3,}\\b\n", "gpt3 inference regex": "^(?=.*dog.*dog.*dog).*$"}
{"index": 6332, "description": "lines with the string 'dog' before the string 'truck', capital letter, or character\n", "truth regex": "(dog).*((truck)|([A-Z])|(.)).*\n", "gpt3 inference regex": "/(dog.*truck)|[A-Z]|./"}
{"index": 6798, "description": "Items with 'dog' preceding a small letter, at least twice.\n", "truth regex": "(dog.*[a-z].*){2,}\n", "gpt3 inference regex": "/(dog[a-z]){2,}/"}
{"index": 5313, "description": "lines which are not containing the string 'dog' or the string 'truck'\n", "truth regex": "~(.*(dog)|(truck).*)\n", "gpt3 inference regex": "^(?!.*(?:dog|truck)).*$"}
{"index": 2821, "description": "lines with 5 or more numbers or characters\n", "truth regex": "(([0-9])|(.)){5,}\n", "gpt3 inference regex": "^[0-9a-zA-Z]{5,}$"}
{"index": 9300, "description": "lines containing words followed by a number, the string \"dog\" or a capital letter\n", "truth regex": "\\b([0-9])|(dog)|([A-Z])\\b\n", "gpt3 inference regex": "\\b\\w+\\d+|dog|[A-Z]\\b"}
{"index": 2375, "description": "lines with 'dog' zero times before a character\n", "truth regex": "((dog)*).*(.).*\n", "gpt3 inference regex": "^(?!.*dog).*"}
{"index": 1478, "description": "lines with words starting with 5 or more characters\n", "truth regex": "(\\b(.)(.*)\\b){5,}\n", "gpt3 inference regex": "^\\w{5,}"}
{"index": 5013, "description": "lines which are not having the string 'dog', zero or more times or the string 'truck'\n", "truth regex": "~(((dog)*)|(truck))\n", "gpt3 inference regex": "^(?!.*dog)(?!.*truck).*$"}
{"index": 1559, "description": "lines containing a capital letter or the word \"dog\" or \"truck\", followed by a character\n", "truth regex": "(.).*(([A-Z])|(dog)|(truck)).*\n", "gpt3 inference regex": "/[A-Z]|dog|truck./"}
{"index": 8885, "description": "lines without ending in a number\n", "truth regex": "~(.*(.*)([0-9]).*)\n", "gpt3 inference regex": "^(.*[^0-9])$"}
{"index": 3986, "description": "lines that do not contain a letter but contain the string 'dog'\n", "truth regex": "(~([A-Za-z]))&(.*dog.*)\n", "gpt3 inference regex": "^(?!.*[a-zA-Z]).*dog.*$"}
{"index": 4429, "description": "Lines without the string 'dog' before a number.\n", "truth regex": "~((dog).*([0-9]).*)\n", "gpt3 inference regex": "^(?!.*dog.*\\d).*$\nExplanation:\n- ^ - Start of the line\n- (?!.*dog.*\\d) - Negative lookahead assertion to ensure that the line does not contain the string 'dog' followed by a number\n- .* - Matches any character zero or more times\n- $ - End of the line"}
{"index": 3951, "description": "lines with lower-case letter or letter, 6 or more times\n", "truth regex": "(([a-z])|([A-Za-z])){6,}\n", "gpt3 inference regex": "^[a-z]{6,}$"}
{"index": 2932, "description": "lines with a vowel, number, and character before a lower-case letter\n", "truth regex": "(([AEIOUaeiou])&([0-9])&(.)).*([a-z]).*\n", "gpt3 inference regex": "^(?=.*[aeiou])(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])[a-zA-Z\\d]*[a-z]$"}
{"index": 6419, "description": "lines with 3 capital letters or characters\n", "truth regex": "(([A-Z])|(.)){3,}\n", "gpt3 inference regex": "^[A-Z]{3}$"}
{"index": 713, "description": "lines starting with capital letter, 5 or more times\n", "truth regex": "(([A-Z])(.*)){5,}\n", "gpt3 inference regex": "^[A-Z]{5,}.*"}
{"index": 8089, "description": "lines containing the string \"dog\" 2 or more times before a lower-case letter\n", "truth regex": "(dog).*(([a-z]){2,}).*\n", "gpt3 inference regex": "/(dog.*?){2,}[a-z]/"}
{"index": 6058, "description": "lines with letter before character, 7 or more times\n", "truth regex": "([A-Za-z]).*((.){7,}).*\n", "gpt3 inference regex": "^[a-zA-Z].{6,}$"}
{"index": 8711, "description": "lines ending with a lower-case letter before string 'dog' or string 'truck'\n", "truth regex": "(.*)((([a-z]).*(dog).*)|(truck))\n", "gpt3 inference regex": "/.*[a-z](dog|truck)$/"}
{"index": 4185, "description": "lines without string 'dog' 3 times\n", "truth regex": "~((dog){3,})\n", "gpt3 inference regex": "^(?!.*dog.*dog.*dog).*$\nExplanation:\n- ^ - Start of the line\n- (?!.*dog.*dog.*dog) - Negative lookahead assertion to ensure that the line does not contain the string 'dog' three times\n- .* - Matches any character (except newline) zero or more times\n- $ - End of the line"}
{"index": 4379, "description": "lines with a vowel before either a letter, 'dog', or 'truck'\n", "truth regex": "([AEIOUaeiou]).*(([A-Za-z])|(dog)|(truck)).*\n", "gpt3 inference regex": "/[aeiou][a-z]*(dog|truck)/"}
{"index": 7813, "description": "Before a character lines having a capital letter, the string 'dog, and the string 'truck'.\n", "truth regex": "(([A-Z])&(dog)&(truck)).*(.).*\n", "gpt3 inference regex": "/(?<=\\b[A-Z])dog|truck/"}
{"index": 843, "description": "lines starting with words contain only a vowel\n", "truth regex": "(\\b[AEIOUaeiou]\\b)(.*)\n", "gpt3 inference regex": "^(?i)[aeiou]\\w*$"}
{"index": 655, "description": "lines with a capital letter, a character or a lower case letter, a vowel,  zero times or more\n", "truth regex": "((([A-Z])&([AEIOUaeiou])&(.))|([a-z]))*\n", "gpt3 inference regex": "^[A-Z][a-zA-Z]?[aeiou]*$"}
{"index": 7219, "description": "lines which have the string 'dog', 6 or more times before a number or a lower-case letter\n", "truth regex": "((dog){6,}).*(([0-9])|([a-z])).*\n", "gpt3 inference regex": "/(dog){6,}(?=[0-9a-z])/"}
{"index": 982, "description": "lines that include at least one letter\n", "truth regex": "([A-Za-z])+\n", "gpt3 inference regex": "[a-zA-Z]"}
{"index": 7439, "description": "lines beginning with a letter or containing a capital letter\n", "truth regex": "(([A-Z])+)|(([A-Za-z])(.*))\n", "gpt3 inference regex": "^[A-Za-z].*|.*[A-Z].*"}
{"index": 8894, "description": "lines with string 'dog' or containing a vowel, 5 or more times\n", "truth regex": "((dog)|(.*[AEIOUaeiou].*)){5,}\n", "gpt3 inference regex": "^(?=.*[aeiouAEIOU].*[aeiouAEIOU].*[aeiouAEIOU].*[aeiouAEIOU].*[aeiouAEIOU]).*(dog).*|^(?=.*[aeiouAEIOU].*[aeiouAEIOU].*[aeiouAEIOU].*[aeiouAEIOU].*[aeiouAEIOU]).*$"}
{"index": 598, "description": "lines having a character and a vowel\n", "truth regex": "(.).*(.*[AEIOUaeiou].*).*\n", "gpt3 inference regex": "^[a-zA-Z][aeiouAEIOU]"}
{"index": 5350, "description": "Items with either 'dog' or a letter.\n", "truth regex": ".*([A-Za-z])|(dog)|([a-z]).*\n", "gpt3 inference regex": "^(dog|[a-zA-Z])$"}
{"index": 4221, "description": "lines that do not contain a lower-case letter followed by the string 'dog' or a letter\n", "truth regex": "(~([a-z])).*((dog)|([A-Za-z])).*\n", "gpt3 inference regex": "^(?!.*[a-z]dog)(?!.*[a-zA-Z])[^\\n]*$"}
{"index": 1422, "description": "lines ending with the string 'truck' after the string 'dog' or a character\n", "truth regex": "(.*)((dog)|(..*truck.*))\n", "gpt3 inference regex": "/(dog|.)truck$/"}
{"index": 3646, "description": "The only string 'dog' appears zero or more times before a capital letter in the lines\n", "truth regex": "((dog)*).*([A-Z]).*\n", "gpt3 inference regex": "/(dog)*[A-Z]/"}
{"index": 4387, "description": "lines which have a capital letter before either the string 'dog', a letter, or the string 'truck'\n", "truth regex": "([A-Z]).*((dog)|([A-Za-z])|(truck)).*\n", "gpt3 inference regex": "^[A-Z].*(dog|[A-Z]|truck)$"}
{"index": 2606, "description": "lines having a letter, character, or lower-case letter\n", "truth regex": ".*([A-Za-z])|(.)|([a-z]).*\n", "gpt3 inference regex": "^[a-zA-Z]$"}
{"index": 4228, "description": "lines having string 'dog', letter, and character before vowel\n", "truth regex": "((dog)&([A-Za-z])&(.)).*([AEIOUaeiou]).*\n", "gpt3 inference regex": "/(dog\\w*[aeiou]\\w*)/"}
{"index": 1096, "description": "lines with lower-case letter, 7 or more times before number\n", "truth regex": "(([a-z]){7,}).*([0-9]).*\n", "gpt3 inference regex": "[a-z]{7,}\\d"}
{"index": 8940, "description": "Items with a vowel, an upper case letter, or letter preceding 'dog'.\n", "truth regex": "(([A-Z])|([AEIOUaeiou])|([A-Za-z])).*(dog).*\n", "gpt3 inference regex": "/[aeiouAEIOU]|[A-Z]|(?<=[a-zA-Z])dog/"}
{"index": 5814, "description": "lines not having letter, vowel, or string 'dog'\n", "truth regex": "~(([A-Za-z])|([AEIOUaeiou])|(dog))\n", "gpt3 inference regex": "^(?!.*[a-zA-Z])(?!.*[aeiouAEIOU])(?!.*dog).*$"}
{"index": 3706, "description": "lines having the string 'dog' 3 times or more before the number\n", "truth regex": "((dog){3,}).*([0-9]).*\n", "gpt3 inference regex": "/(dog.*?){3,}\\d+/"}
{"index": 2846, "description": "The lines that contain  words with a letter repeated 7 or more times\n", "truth regex": "\\b([A-Za-z]){7,}\\b\n", "gpt3 inference regex": "\\b\\w*(\\w)\\1{6,}\\w*\\b"}
{"index": 467, "description": "lines with the string 'dog' followed by a vowel and string 'truck' at least 6 times\n", "truth regex": "(dog.*[AEIOUaeiou].*)&((truck){6,})\n", "gpt3 inference regex": "/(dog[aeiou].*truck){6,}/"}
{"index": 8314, "description": "lines with words containing either a letter, the string 'dog', or a vowel and a lower-case letter\n", "truth regex": "\\b(([A-Za-z])|(dog)|([AEIOUaeiou]))|([a-z])\\b\n", "gpt3 inference regex": "^(?=.*[a-zA-Z])(?=.*dog)|[aeiou][a-z]"}
{"index": 4595, "description": "Items with an upper caee letter or a character preceding a vowel.\n", "truth regex": "(([A-Z])|(.)).*([AEIOUaeiou]).*\n", "gpt3 inference regex": "^[A-Z].*|[aeiouAEIOU].*"}
{"index": 3725, "description": "lines where a number is followed by a character at least 2 times\n", "truth regex": "([0-9].*..*){2,}\n", "gpt3 inference regex": "\\d\\w{2,}"}
{"index": 6450, "description": "lines with a letter, string 'dog', or vowel\n", "truth regex": ".*([A-Za-z])|(dog)|([AEIOUaeiou]).*\n", "gpt3 inference regex": "^[a-zA-Z]|dog|[aeiouAEIOU]$"}
{"index": 6846, "description": "lines containing a character or a number, twice or more times\n", "truth regex": "((.)|([0-9])){2,}\n", "gpt3 inference regex": "^(.*?)(\\w|\\d)\\1+.*$"}
{"index": 3891, "description": "lines having either a capital, string 'dog', or string 'truck' before string 'ring'\n", "truth regex": "(([A-Z])|(dog)|(truck)).*(ring).*\n", "gpt3 inference regex": "/([A-Z]|dog|truck).*ring/"}
{"index": 7407, "description": "Lines starting with a number or a vowel\n", "truth regex": "(([0-9])|([AEIOUaeiou]))(.*)\n", "gpt3 inference regex": "^[0-9aeiouAEIOU].*"}
{"index": 5892, "description": "lines ending in and with only a letter\n", "truth regex": ".*(.*)([A-Za-z]).*\n", "gpt3 inference regex": "^[a-zA-Z]$"}
{"index": 5301, "description": "lines with only a number before lower-case letter\n", "truth regex": "(([0-9])+).*([a-z]).*\n", "gpt3 inference regex": "^\\d[a-z]$"}
{"index": 4808, "description": "lines with zero or more vowel before zero or string 'dog' or 'truck'\n", "truth regex": "([AEIOUaeiou].*dog.*)|((truck)*)\n", "gpt3 inference regex": "^[aeiou]*((dog)|(truck))$"}
{"index": 8148, "description": "lines that do not start with a capital letter, at least 7 or more times\n", "truth regex": "~((([A-Z])(.*)){7,})\n", "gpt3 inference regex": "^(?!^[A-Z]).{7,}$"}
{"index": 3931, "description": "lines with a number or the string 'dog' preceded by a letter\n", "truth regex": "([A-Za-z]).*(([0-9])|(dog)).*\n", "gpt3 inference regex": "^[a-zA-Z](\\d+|dog)$"}
{"index": 9672, "description": "lines containing a vowel after a number, the string 'dog', and the string 'truck'\n", "truth regex": "(([0-9])&(dog)&(truck)).*([AEIOUaeiou]).*\n", "gpt3 inference regex": "\\d+[aeiou].*dog.*truck"}
{"index": 1312, "description": "lines having string 'dog', character, and vowel before letter\n", "truth regex": "((dog)&(.)&([AEIOUaeiou])).*([A-Za-z]).*\n", "gpt3 inference regex": "^(?=.*[aeiou])[a-zA-Z]*[aeiou][a-zA-Z]*[dog][a-zA-Z]*$"}
{"index": 1942, "description": "lines without a lower-case letter or the string 'dog'\n", "truth regex": "~(([a-z])|(dog))\n", "gpt3 inference regex": "^(?!.*[a-z]|.*dog).*$"}
{"index": 841, "description": "lines containing number, character, and vowel\n", "truth regex": ".*([0-9])&(.)&([AEIOUaeiou]).*\n", "gpt3 inference regex": "^[a-zA-Z0-9]*[aeiouAEIOU][a-zA-Z0-9]*$"}
{"index": 5792, "description": "lines not having string 'dog', string 'truck', and a lower-case letter\n", "truth regex": "~((dog)&(truck)&([a-z]))\n", "gpt3 inference regex": "^(?!.*dog)(?!.*truck)(?!.*[a-z]).*$"}
{"index": 3683, "description": "lines with number before a capital or character\n", "truth regex": "([0-9]).*(([A-Z])|(.)).*\n", "gpt3 inference regex": "^\\d+[A-Z|a-z]"}
{"index": 8876, "description": "lines with character or letter, 7 or more times\n", "truth regex": "((.)|([A-Za-z])){7,}\n", "gpt3 inference regex": "^[a-zA-Z]{7,}$"}
{"index": 5660, "description": "lines ending with a vowel before a capital letter\n", "truth regex": "((.*)([A-Z])).*([AEIOUaeiou]).*\n", "gpt3 inference regex": "/[aeiou][A-Z]$/"}
{"index": 4447, "description": "lines with words with a vowel, letter, or string 'dog'\n", "truth regex": "\\b([AEIOUaeiou])&([A-Za-z])&(dog)\\b\n", "gpt3 inference regex": "\\b\\w*[aeiou]\\w*\\b|\\b\\w*[A-Za-z]\\w*\\b|\\b\\w*dog\\w*\\b"}
{"index": 3066, "description": "lines with a capital letter, 2 or more times before the string 'dog' in them\n", "truth regex": "(([A-Z]){2,}).*(dog).*\n", "gpt3 inference regex": "/^[A-Z]{2,}.*dog.*$/"}
{"index": 8135, "description": "lines with a vowel before capital letter\n", "truth regex": "(.*[AEIOUaeiou].*[A-Z].*.*)+\n", "gpt3 inference regex": "(?<=[aeiou])[A-Z]"}
{"index": 5957, "description": "lines with capital before a character and string 'dog'\n", "truth regex": "([A-Z]).*((.)&(dog)).*\n", "gpt3 inference regex": "^[A-Z].*dog$"}
{"index": 4678, "description": "Items with 'dog' preceding any letter.\n", "truth regex": "((dog.*[A-Z].*)|([a-z]))*\n", "gpt3 inference regex": "/dog[a-zA-Z]/"}
{"index": 2869, "description": "lines with words, a character, number, and a vowel\n", "truth regex": "\\b(.)&([0-9])&([AEIOUaeiou])\\b\n", "gpt3 inference regex": "^\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s"}
{"index": 2535, "description": "lines containing a character followed by a vowel, the string 'dog', as well as the string 'truck'\n", "truth regex": "(.).*(([AEIOUaeiou])&(dog)&(truck)).*\n", "gpt3 inference regex": "^[a-zA-Z][aeiouAEIOU].*dog.*truck.*$"}
{"index": 5482, "description": "lines starting in vowel or the string 'dog' and character\n", "truth regex": "(([AEIOUaeiou])|((dog)&(.)))(.*)\n", "gpt3 inference regex": "^(?:[aeiou]|dog.).*$"}
{"index": 4302, "description": "lines with words and either a letter, the string 'dog', or a character\n", "truth regex": "\\b([A-Za-z])|(dog)|(.)\\b\n", "gpt3 inference regex": "\\w+[a-zA-Z]|dog|\\S"}
{"index": 5608, "description": "lines with words with the string 'dog' or either the string 'truck', the string 'ring', or the string 'lake' in them\n", "truth regex": "\\b(dog)|((truck)|(ring)|(lake))\\b\n", "gpt3 inference regex": "\\b(?:\\w*dog\\w*|\\w*truck\\w*|\\w*ring\\w*|\\w*lake\\w*)\\b"}
{"index": 7527, "description": "Items with any letter.\n", "truth regex": ".*([a-z])|([A-Z])|([A-Za-z]).*\n", "gpt3 inference regex": "[a-zA-Z]+"}
{"index": 1534, "description": "Lines with a lower case letter before any characters or the string 'dog'\n", "truth regex": "([a-z]).*((.)|(dog)).*\n", "gpt3 inference regex": "^[a-z].*|dog.*"}
{"index": 8110, "description": "lines with a letter, 4 or more times before a vowel in them\n", "truth regex": "(([A-Za-z]){4,}).*([AEIOUaeiou]).*\n", "gpt3 inference regex": "^[a-zA-Z]{4,}[aeiouAEIOU]"}
{"index": 6699, "description": "lines with a vowel and character before a letter\n", "truth regex": "(([AEIOUaeiou])&(.)).*([A-Za-z]).*\n", "gpt3 inference regex": "^[a-zA-Z]*[aeiouAEIOU][a-zA-Z]*[a-zA-Z]$"}
{"index": 4696, "description": "lines that have words with a capital letter, a lower-case letter, and the string 'dog'\n", "truth regex": "\\b([A-Z])&([a-z])&(dog)\\b\n", "gpt3 inference regex": "^[A-Z][a-z]*dog.*$"}
{"index": 2580, "description": "lines that do not include the string 'dog'\n", "truth regex": "~(.*dog.*)\n", "gpt3 inference regex": "^(?!.*dog).*$"}
{"index": 7178, "description": "lines with a lower-case letter before a number, zero or more times in them\n", "truth regex": "([a-z]).*(([0-9])*).*\n", "gpt3 inference regex": "[a-z]*\\d.*"}
{"index": 4644, "description": "lines with a character, 7 or more times before a capital\n", "truth regex": "((.){7,}).*([A-Z]).*\n", "gpt3 inference regex": "/.*[a-zA-Z]{7,}[A-Z].*/"}
{"index": 4858, "description": "lines that have the 'dog' string or an upper-case letter occurring 5 times or greater\n", "truth regex": "((dog)|([A-Z])){5,}\n", "gpt3 inference regex": "/(dog|[A-Z]{5,})/"}
{"index": 5946, "description": "lines which don't start with a number but do begin with an upper-case letter\n", "truth regex": "(([A-Z])(.*))&(~([0-9]))\n", "gpt3 inference regex": "^[^0-9][A-Z].*"}
{"index": 9822, "description": "lines with a character followed by a capital letter and then a number\n", "truth regex": "(..*[A-Z].*).*([0-9]).*\n", "gpt3 inference regex": "^[a-zA-Z][A-Z][0-9]$"}
{"index": 4673, "description": "lines without a letter, string 'dog', or lower-case letter\n", "truth regex": "~(([A-Za-z])&(dog)&([a-z]))\n", "gpt3 inference regex": "^(?!.*[a-zA-Z])(?!.*dog)(?!.*[a-z]).*$"}
{"index": 3341, "description": "lines not containing a number nor a character\n", "truth regex": "~(([0-9])&(.))\n", "gpt3 inference regex": "^(?![\\d\\w]).*$"}
{"index": 1376, "description": "lines using the word string \"dog\" before the string \"truck\", no times or more\n", "truth regex": "(\\b(dog).*(truck).*\\b)*\n", "gpt3 inference regex": "^(?=.*dog).*truck$"}
{"index": 9320, "description": "lines having words with the string 'dog' before letter or number\n", "truth regex": "\\b((dog).*([A-Za-z]).*)|([0-9])\\b\n", "gpt3 inference regex": "\\b\\w*dog\\w*[a-zA-Z0-9]\\w*\\b"}
{"index": 6275, "description": "lines ending in a number or character\n", "truth regex": "(((.*)([0-9]))|(.))+\n", "gpt3 inference regex": "/.*[0-9A-Za-z]$/"}
{"index": 1308, "description": "Lines not containing a lower-case letter, a number, or a letter\n", "truth regex": "~(([a-z])|([0-9])|([A-Za-z]))\n", "gpt3 inference regex": "^[^a-z0-9A-Z]+$"}
{"index": 7569, "description": "lines with words with ending which are containing only the string 'dog'\n", "truth regex": "\\b(.*)(dog)\\b\n", "gpt3 inference regex": "\\b\\w*dog\\b"}
{"index": 7358, "description": "Items with a vowel at least seven time preceding a letter.\n", "truth regex": "(([AEIOUaeiou]){7,}).*([A-Za-z]).*\n", "gpt3 inference regex": "/[aeiou]{7,}[a-zA-Z]/"}
{"index": 2252, "description": "lines without zero or more of only a lower-case letter\n", "truth regex": "~(([a-z])*)\n", "gpt3 inference regex": "^[^a-z]*$"}
{"index": 9892, "description": "lines containing the string 'dog' or the string 'truck' before a character at least 3 times\n", "truth regex": "(((dog)|(truck)){3,}).*(.).*\n", "gpt3 inference regex": "/(dog|truck).*\\w{3,}/"}
{"index": 8830, "description": "lines that contain a character followed by a capital letter, at least 3 times\n", "truth regex": "((.){3,}).*([A-Z]).*\n", "gpt3 inference regex": "/.*[a-z][A-Z].*[a-z][A-Z].*[a-z][A-Z].*/"}
{"index": 7980, "description": "lines that have a character, a lower-case letter, and the string 'dog', all before a capital letter\n", "truth regex": "((.)&(dog)&([a-z])).*([A-Z]).*\n", "gpt3 inference regex": "/[a-zA-Z][a-z]+dog[A-Z]/"}
{"index": 8850, "description": "lines containing either a lower-case letter, a vowel, or a number after the string 'dog'\n", "truth regex": "(dog).*(([a-z])|([AEIOUaeiou])|([0-9])).*\n", "gpt3 inference regex": "/dog[a-zAEIOU0-9]/"}
{"index": 9345, "description": "lines containing the string 'dog' followed by a lower-case letter that precedes a vowel\n", "truth regex": "(dog.*[a-z].*).*([AEIOUaeiou]).*\n", "gpt3 inference regex": "/dog[a-z][aeiou]/"}
{"index": 9276, "description": "lines without a letter or string 'dog'\n", "truth regex": "~(([A-Za-z])|([a-z])|(dog))\n", "gpt3 inference regex": "^(?!.*[a-zA-Z]|.*dog).*$"}
{"index": 521, "description": "lines with words that include a letter, the string 'dog', or a lower-case letter\n", "truth regex": "\\b(dog)|([a-z])|([A-Za-z])\\b\n", "gpt3 inference regex": "/[a-zA-Z]*[dog][a-zA-Z]*|[a-z]/"}
{"index": 3232, "description": "lines ending with string 'dog' followed by number, zero or more times\n", "truth regex": "(.*)((dog.*[0-9].*)*)\n", "gpt3 inference regex": "/dog\\d*/"}
{"index": 226, "description": "Lines containing a lower case letter or capital letter\n", "truth regex": ".*([a-z])|([A-Z]).*\n", "gpt3 inference regex": "^[a-zA-Z]+$"}
{"index": 3953, "description": "lines not having character, a letter, or number\n", "truth regex": "~((.)|([A-Za-z])|([0-9]))\n", "gpt3 inference regex": "^[^a-zA-Z0-9]+$"}
{"index": 1427, "description": "lines with words with 'dog' before 'truck'\n", "truth regex": "\\b(dog).*(.*truck.*).*\\b\n", "gpt3 inference regex": "^(?=.*dog).*truck"}
{"index": 8748, "description": "lines ending in words with a number before string 'dog'\n", "truth regex": "(.*)(\\b[0-9].*dog.*\\b)\n", "gpt3 inference regex": "^\\w+\\d+.*dog$"}
{"index": 8060, "description": "lines with 3 or more of string 'dog' before a capital letter or number\n", "truth regex": "((dog){3,}).*(([0-9])|([A-Z])).*\n", "gpt3 inference regex": "/(dog.*?){3,}[A-Z0-9]/"}
{"index": 5525, "description": "Lines having the string 'dog' at least once ending with any letter\n", "truth regex": "((dog)+)&((.*)([A-Za-z]))\n", "gpt3 inference regex": "/dog\\w$/"}
{"index": 167, "description": "lines containing words with the string 'dog' followed by a vowel in it\n", "truth regex": ".*\\bdog.*[AEIOUaeiou].*\\b.*\n", "gpt3 inference regex": "\\b\\w*dog[aeiou]\\w*\\b"}
{"index": 1103, "description": "lines containing the string \"dog\", a letter, and a capital letter followed by a character\n", "truth regex": "((dog)&([A-Za-z])&([A-Z])).*(.).*\n", "gpt3 inference regex": "/dog[a-z][A-Z]./"}
{"index": 9089, "description": "lines with words with number before character, 2 or more times\n", "truth regex": "(\\b([0-9]).*(.).*\\b){2,}\n", "gpt3 inference regex": "^\\d+[a-zA-Z]{2,}"}
{"index": 6759, "description": "lines with a number, zero or more times and letter or capital letter\n", "truth regex": "(([0-9])*)&(([A-Za-z])|([A-Z]))\n", "gpt3 inference regex": "^\\d*[a-zA-Z]*$"}
{"index": 7648, "description": "lines with a vowel, the string 'dog', or a lower-case letter\n", "truth regex": ".*([AEIOUaeiou])|(dog)|([a-z]).*\n", "gpt3 inference regex": "/[aeiou]|dog|[a-z]/"}
{"index": 5473, "description": "Lines containing the string 'dog' before a number, the string 'truck', and lower case letter\n", "truth regex": "(.*dog.*).*(([0-9])&(truck)&([a-z])).*\n", "gpt3 inference regex": "/dog.*\\d.*truck.*[a-z]/"}
{"index": 2376, "description": "Items with a vowel preceding a character and 'dog'.\n", "truth regex": "([AEIOUaeiou]).*((dog)&(.)).*\n", "gpt3 inference regex": "/[aeiou]dog/"}
{"index": 296, "description": "lines with a zero or more numbers before a lower-case letter\n", "truth regex": "(([0-9])*).*([a-z]).*\n", "gpt3 inference regex": "^\\d*[a-z]"}
{"index": 1785, "description": "lines without a vowel, number, or string 'dog'\n", "truth regex": "~(([AEIOUaeiou])&([0-9])&(dog))\n", "gpt3 inference regex": "^(?!.*[aeiouAEIOU\\d]|dog).*$"}
{"index": 7684, "description": "lines having either a lower-case letter, the string 'dog', or a number before a capital letter in them\n", "truth regex": "(([a-z])|(dog)|([0-9])).*([A-Z]).*\n", "gpt3 inference regex": "/[a-z]|dog|\\d[A-Z]/"}
{"index": 7174, "description": "lines with 7 or more of a letter or string 'dog'\n", "truth regex": "(([A-Za-z])|(dog)){7,}\n", "gpt3 inference regex": "^(?=.*(?:dog){7,}).*$"}
{"index": 4700, "description": "lines not having a vowel ending with the string 'dog'\n", "truth regex": "(~([AEIOUaeiou])).*((.*)(dog)).*\n", "gpt3 inference regex": "^(?!.*[aeiouAEIOU]$).*dog$"}
{"index": 5657, "description": "line of code that includes the string \"dog\" then the string \"truck\" repeated four times after\n", "truth regex": "(dog.*truck.*){4,}\n", "gpt3 inference regex": "/(dog.*truck){4}/"}
{"index": 6492, "description": "lines with a letter before a vowel, string 'dog', or lower-case letter\n", "truth regex": "([A-Za-z]).*(([AEIOUaeiou])&(dog)&([a-z])).*\n", "gpt3 inference regex": "/[a-zA-Z][aeiou]|dog|[a-z]/"}
{"index": 7978, "description": "Items with an upper case letter or character at least six times.\n", "truth regex": "(([A-Z])|(.)){6,}\n", "gpt3 inference regex": "^[A-Z]{6,}$"}
{"index": 1085, "description": "lines with words with ending with a letter before the string 'dog' in it\n", "truth regex": "(\\b(.*)([A-Za-z])\\b).*(dog).*\n", "gpt3 inference regex": "\\b\\w*[a-z]dog\\b"}
{"index": 5888, "description": "Lines containing only a letter, 6 times before 'dog'\n", "truth regex": "(([A-Za-z]){6,}).*(dog).*\n", "gpt3 inference regex": "^[a-zA-Z]{6}dog$"}
{"index": 9715, "description": "lines ending in words with 7 or more capital letters\n", "truth regex": "(.*)(\\b([A-Z]){7,}\\b)\n", "gpt3 inference regex": "\\b[A-Z]{7,}\\b$"}
{"index": 8057, "description": "lines starting with string 'dog' before vowel at least once\n", "truth regex": "((dog)(.*)).*(([AEIOUaeiou])+).*\n", "gpt3 inference regex": "^(dog.*[aeiou].*)"}
{"index": 1402, "description": "lines with words with a letter or the string 'dog', 6 or more times in them\n", "truth regex": "\\b(([A-Za-z])|(dog)){6,}\\b\n", "gpt3 inference regex": "\\b(?:\\w*dog\\w*|\\w*[a-zA-Z]\\w*){6,}\\b"}
{"index": 9827, "description": "lines with a number before string 'dog' then letter\n", "truth regex": "([0-9].*dog.*).*([A-Za-z]).*\n", "gpt3 inference regex": "^\\d+dog[a-zA-Z]$"}
{"index": 3977, "description": "lines that have 4 or more numbers\n", "truth regex": ".*([0-9]){4,}.*\n", "gpt3 inference regex": "\\d{4,}"}
{"index": 3652, "description": "lines with the string 'dog', a character, or the string 'truck' before a letter\n", "truth regex": "((dog)|(.)|(truck)).*([A-Za-z]).*\n", "gpt3 inference regex": "/(dog|.\\w|truck)[a-zA-Z]/"}
{"index": 4456, "description": "lines containing letter or string 'dog', zero or more times\n", "truth regex": ".*(([A-Za-z])|(dog))*.*\n", "gpt3 inference regex": "/(dog)*/"}
{"index": 4912, "description": "lines with lower-case letter before vowel, 6 or more times\n", "truth regex": "([a-z]).*(([AEIOUaeiou]){6,}).*\n", "gpt3 inference regex": "^[a-z]*[aeiou]{1}[a-z]{5,}$"}
{"index": 2579, "description": "lines where 5 or more times the string 'dog' or a vowel occurs\n", "truth regex": "((dog)|([AEIOUaeiou])){5,}\n", "gpt3 inference regex": "^(?=.*(?:dog){5,})(?=.*[aeiou]).*$"}
{"index": 2288, "description": "lines ending with lower-case letter at least once before letter\n", "truth regex": "(((.*)([a-z]))+).*([A-Za-z]).*\n", "gpt3 inference regex": "^[a-zA-Z]*[a-z][a-zA-Z]*$"}
{"index": 8301, "description": "lines that contain a vowel followed by a number and a lower-case letter, at least once\n", "truth regex": "(([AEIOUaeiou])+).*([0-9].*[a-z].*).*\n", "gpt3 inference regex": "/[aeiou]\\d[a-z]/"}
{"index": 2090, "description": "lines with a capital letter followed by dog\n", "truth regex": "([A-Z].*dog.*)(.*)\n", "gpt3 inference regex": "^[A-Z].*dog$"}
{"index": 5818, "description": "lines with words with lower-case letter, a letter, and number\n", "truth regex": "\\b([a-z])&([A-Za-z])&([0-9])\\b\n", "gpt3 inference regex": "^[a-z][a-zA-Z0-9]*[a-zA-Z][0-9]+$"}
{"index": 2929, "description": "2 or more lines containing a letter or a vowel\n", "truth regex": "(.*([A-Za-z])|([AEIOUaeiou]).*){2,}\n", "gpt3 inference regex": "^[a-zA-Z]*[aeiouAEIOU][a-zA-Z]*\\n[a-zA-Z]*[aeiouAEIOU][a-zA-Z]*$"}
{"index": 256, "description": "lines with 4 or more of a letter before the string 'dog'\n", "truth regex": "([A-Za-z]).*((dog){4,}).*\n", "gpt3 inference regex": "^[a-zA-Z]{4,}dog"}
{"index": 3838, "description": "lines beginning with the string 'dog' or a vowel\n", "truth regex": "(((dog)(.*))|([AEIOUaeiou]))+\n", "gpt3 inference regex": "^(dog|[aeiouAEIOU])"}
{"index": 6049, "description": "lines containing string 'dog' or string 'truck', zero or more times\n", "truth regex": "(.*(dog)|(truck).*)*\n", "gpt3 inference regex": "/(dog|truck)*/"}
{"index": 9862, "description": "lines with no vowels or \"dog at the end\n", "truth regex": "~(([AEIOUaeiou])|((.*)(dog)))\n", "gpt3 inference regex": "^[^aeiouAEIOU]*[^dog]$"}
{"index": 4100, "description": "lines that have a lower-case letter followed by either a vowel, capital letter, or a letter\n", "truth regex": "(([A-Z])|([AEIOUaeiou])|([A-Za-z])).*([a-z]).*\n", "gpt3 inference regex": "^[a-z][aeiouAEIOUa-zA-Z]$"}
{"index": 7977, "description": "lines containing words with a letter, a character, or a lower-case letter\n", "truth regex": "\\b([A-Za-z])|(.)|([a-z])\\b\n", "gpt3 inference regex": "\\b[a-zA-Z]*[a-zA-Z0-9]*[a-z]+\\b"}
{"index": 3039, "description": "lines which are starting with a character, zero or more times or the string 'dog'\n", "truth regex": "(((.)*)|(dog))(.*)\n", "gpt3 inference regex": "^(.|dog).*"}
{"index": 334, "description": "lines without words with a capital letter at least once\n", "truth regex": "~(\\b([A-Z])+\\b)\n", "gpt3 inference regex": "^[^A-Z]*$"}
{"index": 7053, "description": "lines having a capital letter before a number following a lower-case letter\n", "truth regex": "([A-Z].*[0-9].*).*([a-z]).*\n", "gpt3 inference regex": "^[A-Z][a-z][0-9]$"}
{"index": 9617, "description": "lines with words with a character before a letter at least once in them\n", "truth regex": "(\\b(.).*([A-Za-z]).*\\b)+\n", "gpt3 inference regex": "/(?<=\\w)\\w+/"}
{"index": 6939, "description": "lines with words, a number, and string 'dog'\n", "truth regex": ".*\\b([0-9])&(dog)\\b.*\n", "gpt3 inference regex": "^\\w+\\s+\\d+\\s+dog$"}
{"index": 6768, "description": "Items with a letter preceding a terminating vowel.\n", "truth regex": "([A-Za-z]).*((.*)([AEIOUaeiou])).*\n", "gpt3 inference regex": "^[a-zA-Z][aeiou]$"}
{"index": 779, "description": "lines which are ending with a number and containing the string 'dog'\n", "truth regex": "((.*)([0-9]))&(.*dog.*)\n", "gpt3 inference regex": "/.*dog\\d$/"}
{"index": 4277, "description": "lines with the string 'dog', a capital letter, as well as the string 'truck' followed by a number\n", "truth regex": "((dog)&([A-Z])&(truck)).*([0-9]).*\n", "gpt3 inference regex": "/dog[A-Z].*truck\\d+/"}
{"index": 1507, "description": "line with the string 'dog' and 'truck' and lower-case letter before a character\n", "truth regex": "((dog)&(truck)&([a-z])).*(.).*\n", "gpt3 inference regex": "/[a-z]dog[a-z]*truck[a-z]/"}
{"index": 3776, "description": "lines with a number following a capital letter at least 2 times\n", "truth regex": "([A-Z].*[0-9].*){2,}\n", "gpt3 inference regex": "/([A-Z].*\\d){2,}/"}
{"index": 2206, "description": "lines with 2 or more lower-case letters before a character\n", "truth regex": "(([a-z]){2,}).*(.).*\n", "gpt3 inference regex": "[a-z]{2,}.*"}
{"index": 6836, "description": "lines with the 4 or more of the string 'dog' before a lower-case letter\n", "truth regex": "(dog).*(([a-z]){4,}).*\n", "gpt3 inference regex": "/(dog){4,}[a-z]/"}
{"index": 8461, "description": "lines with words and 3 or more of a capital letter before number\n", "truth regex": "(\\b([A-Z]).*([0-9]).*\\b){3,}\n", "gpt3 inference regex": "/^[A-Z]{3,}\\d+/"}
{"index": 4430, "description": "Lines containing either letter, the string 'dog', or the string 'truck'\n", "truth regex": ".*([A-Za-z])|(dog)|(truck).*\n", "gpt3 inference regex": "^[a-zA-Z]+|dog|truck$"}
{"index": 7923, "description": "lines starting in number with a capital letter before lower-case letter\n", "truth regex": "(([0-9])(.*)).*([A-Z].*[a-z].*).*\n", "gpt3 inference regex": "^[0-9][A-Z][a-z]"}
{"index": 8249, "description": "lines with a letter, at least twice\n", "truth regex": "(.*[A-Za-z].*){2,}\n", "gpt3 inference regex": "^[a-zA-Z].*[a-zA-Z]$"}
{"index": 8447, "description": "lines containing  lower-case letter, 2 or more times\n", "truth regex": ".*(.*)(([a-z]){2,}).*\n", "gpt3 inference regex": "[a-z]{2,}"}
{"index": 6061, "description": "lines containing words with a number, a character, or the string 'dog'\n", "truth regex": "\\b(([0-9])&(.))|(dog)\\b\n", "gpt3 inference regex": "\\b(\\w*\\d\\w*|\\w*[a-zA-Z]\\w*|\\w*dog\\w*)\\b"}
{"index": 4643, "description": "lines not containing the string 'dog', the string 'truck', or a number\n", "truth regex": "~((dog)&(truck)&([0-9]))\n", "gpt3 inference regex": "^(?!.*dog)(?!.*truck)(?!.*\\d).*$\nExplanation:\n- ^ - Start of the line\n- (?!.*dog) - Negative lookahead to ensure that the line does not contain the string 'dog'\n- (?!.*truck) - Negative lookahead to ensure that the line does not contain the string 'truck'\n- (?!.*\\d) - Negative lookahead to ensure that the line does not contain any number\n- .* - Matches any character (except newline) zero or more times\n- $ - End of the line"}
{"index": 3546, "description": "lines with a capital followed by character or ending with string 'dog'\n", "truth regex": "([A-Z].*..*)|((.*)(dog))\n", "gpt3 inference regex": "^[A-Z].*|.*dog$"}
{"index": 7176, "description": "lines with the string 'dog', a number, or a letter before 'truck'\n", "truth regex": "((dog)|([0-9])|([A-Za-z])).*(truck).*\n", "gpt3 inference regex": "/(dog|\\d+|[a-zA-Z])truck/"}
{"index": 5141, "description": "lines with a vowel and letter before string 'dog'\n", "truth regex": "(([AEIOUaeiou])&([A-Za-z])).*(~(dog)).*\n", "gpt3 inference regex": "^(?=.*[aeiou])(?=.*[a-zA-Z])\\w*dog"}
{"index": 1261, "description": "Lines beginning with a character.\n", "truth regex": "\\b(.)(.*)\\b\n", "gpt3 inference regex": "^[a-zA-Z].*"}
{"index": 2128, "description": "lines with words and a number, vowel, or the string 'dog'\n", "truth regex": "\\b([0-9])|([AEIOUaeiou])|(dog)\\b\n", "gpt3 inference regex": "^(?=.*[a-zA-Z])(?=.*[0-9aeiouAEIOU]|dog).*$"}
{"index": 9748, "description": "lines ending in string 'dog' with a letter\n", "truth regex": "((.*)(dog))&(([A-Za-z])+)\n", "gpt3 inference regex": "/.*[a-zA-Z]dog$/"}
{"index": 2849, "description": "lines with a character, capital letter, or string 'dog' before a letter\n", "truth regex": "((.)|([A-Z])|(dog)).*([A-Za-z]).*\n", "gpt3 inference regex": "/[a-zA-Z]|dog[a-zA-Z]/"}
{"index": 4168, "description": "Items with 'dog' or a small letter or 'truck'.\n", "truth regex": ".*(dog)|(truck)|([a-z]).*\n", "gpt3 inference regex": "/(dog|[a-z]|truck)/"}
{"index": 5355, "description": "lines ending with words with the string 'dog' and the string 'truck', the string 'ring', or the string 'lake'\n", "truth regex": "((.*)(dog))&((truck)|(ring)|(lake))\n", "gpt3 inference regex": "^(.*(?:dog|truck|ring|lake))$"}
{"index": 992, "description": "lines with 'dog', a letter, or 'truck' before a vowel\n", "truth regex": "((dog)|([A-Za-z])|(truck)).*([AEIOUaeiou]).*\n", "gpt3 inference regex": "/(dog|truck|[a-zA-Z]([aeiouAEIOU]))/"}
{"index": 5498, "description": "lines with words that contain the string 'dog' before a capital letter in them\n", "truth regex": "\\b(.*dog.*).*([A-Z]).*\\b\n", "gpt3 inference regex": "/(?=.*dog.*[A-Z])/"}
{"index": 6714, "description": "string 'dog; appears before a character followed by a number in the lines\n", "truth regex": "(dog).*(..*[0-9].*).*\n", "gpt3 inference regex": "/dog;.*[a-zA-Z]\\d/"}
{"index": 2054, "description": "lines containing 0 or more of the string 'dog', before a number or the string 'truck'\n", "truth regex": "((dog)*).*(([0-9])|(truck)).*\n", "gpt3 inference regex": "/(dog)*(\\d|truck)/"}
{"index": 9333, "description": "Items with a vowel preceding a letter, a small letter, and 'dog'.\n", "truth regex": "([AEIOUaeiou]).*(([A-Za-z])&(dog)&([a-z])).*\n", "gpt3 inference regex": "/[aeiou][a-z]dog/"}
{"index": 1536, "description": "lines without a character, a number, or the string 'dog'\n", "truth regex": "~((.)|([0-9])|(dog))\n", "gpt3 inference regex": "^(?!.*[a-zA-Z0-9]|dog).*$"}
{"index": 9071, "description": "lines with 'dog' and capital letter before a letter\n", "truth regex": "((dog)&([A-Z])).*(.*[A-Za-z].*).*\n", "gpt3 inference regex": "^[A-Z][a-zA-Z]*dog[a-zA-Z]*$"}
{"index": 487, "description": "lines containinbg words having a lower-case letter, a character, as well as a number\n", "truth regex": "\\b([a-z])&(.)&([0-9])\\b\n", "gpt3 inference regex": "^[a-z].*[a-zA-Z0-9].*[0-9]$"}
{"index": 9228, "description": "lines with words and string 'dog' before a number\n", "truth regex": "\\b~((dog).*([0-9]).*)\\b\n", "gpt3 inference regex": "^(?=.*\\bdog\\b)(?=.*\\d).*$"}
{"index": 7325, "description": "Items with 'dog' preceding an upper case letter preceding a character.\n", "truth regex": "(dog).*([A-Z].*..*).*\n", "gpt3 inference regex": "/(dog[A-Z].)/"}
{"index": 6005, "description": "lines starting with a letter following a vowel\n", "truth regex": "([AEIOUaeiou].*[A-Za-z].*)(.*)\n", "gpt3 inference regex": "^[aeiou][a-zA-Z].*"}
{"index": 7230, "description": "lines that contain either a vowel or the strings 'dog' or 'truck'\n", "truth regex": ".*(dog)|([AEIOUaeiou])|(truck).*\n", "gpt3 inference regex": "^(?=.*[aeiou])(?=.*dog|truck).*$"}
{"index": 7235, "description": "lines with a vowel followed by a capital letter, 6 or more times in them\n", "truth regex": "([AEIOUaeiou].*[A-Z].*){6,}\n", "gpt3 inference regex": "/(?=.*[aeiouAEIOU][A-Z]){6,}.*/"}
{"index": 2890, "description": "lines ending with a capital letter coming before a lower-case letter\n", "truth regex": "((.*)([A-Z])).*([a-z]).*\n", "gpt3 inference regex": "/^[A-Z].*[a-z]$/"}
{"index": 578, "description": "lines having characters at least 6 times before a vowel\n", "truth regex": "((.){6,}).*([AEIOUaeiou]).*\n", "gpt3 inference regex": "^(.*[a-zA-Z]){6,}[aeiouAEIOU]"}
{"index": 651, "description": "lines that begin with a letter, at least seven times\n", "truth regex": "(([A-Za-z])(.*)){7,}\n", "gpt3 inference regex": "^[a-zA-Z]{7,}.*"}
{"index": 272, "description": "lines with a letter before either \"dog\", a character, or a number\n", "truth regex": "([A-Za-z]).*((dog)|(.)|([0-9])).*\n", "gpt3 inference regex": "^[a-zA-Z].*(dog|\\w|\\d)$"}
{"index": 8083, "description": "lines with words with the string 'dog', a capital letter, and the string 'truck' in them\n", "truth regex": "\\b(dog)&([A-Z])&(truck)\\b\n", "gpt3 inference regex": "/\\b\\w*dog\\w*[A-Z]\\w*truck\\w*\\b/"}
{"index": 7810, "description": "lines with a number, character, and letter before string 'dog'\n", "truth regex": "(([0-9])&(.)&([A-Za-z])).*(dog).*\n", "gpt3 inference regex": "^\\d\\w\\w+dog$"}
{"index": 1997, "description": "lines ending with the string 'dog' before a vowel, zero or more times in it\n", "truth regex": "((.*)(dog)).*(([AEIOUaeiou])*).*\n", "gpt3 inference regex": "^(.*[aeiou].*dog.*)*$"}
{"index": 7049, "description": "lines with words and 6 or more numbers\n", "truth regex": "\\b.*([0-9]){6,}.*\\b\n", "gpt3 inference regex": "\\b\\w+\\b.*\\d{6,}"}
{"index": 2436, "description": "lines with words without the string 'dog'\n", "truth regex": "\\b.*~(dog).*\\b\n", "gpt3 inference regex": "^(?!.*dog).*$\nExplanation:\n- ^ - asserts the start of the line\n- (?!.*dog) - negative lookahead assertion to ensure that the line does not contain the string 'dog'\n- .* - matches any character (except newline) zero or more times\n- $ - asserts the end of the line"}
{"index": 2006, "description": "lines with the string 'dog', a vowel, as well as a number followed by the string 'truck'\n", "truth regex": "((dog)&([AEIOUaeiou])&([0-9])).*(truck).*\n", "gpt3 inference regex": "^(?=.*dog)(?=.*[aeiou])(?=.*\\dtruck).*$"}
{"index": 6877, "description": "Lines with a letter, or \"dog\" before \"truck\"\n", "truth regex": "(([A-Za-z])|([AEIOUaeiou])|(dog)).*(truck).*\n", "gpt3 inference regex": "^[a-zA-Z].*truck$|^dog.*truck$"}
{"index": 4608, "description": "lines that contain a capital letter repeated 7 times\n", "truth regex": "((.*)([A-Z])){7,}\n", "gpt3 inference regex": "[A-Z]{7}"}
{"index": 7481, "description": "lines starting with a vowel before a capital, zero or more times\n", "truth regex": "(([AEIOUaeiou])(.*)).*(([A-Z])*).*\n", "gpt3 inference regex": "^[aeiouAEIOU].*[A-Z]*$"}
{"index": 1946, "description": "Items with 'dog' or a letter preceding a numeral.\n", "truth regex": "(([A-Za-z])|(dog)).*([0-9]).*\n", "gpt3 inference regex": "/(dog|\\w\\d)/"}
{"index": 7415, "description": "lines containing a letter or 5 or more characters\n", "truth regex": "(([A-Za-z])(.*))|((.){5,})\n", "gpt3 inference regex": "^[a-zA-Z].{4,}$"}
{"index": 1201, "description": "lines not containing the string 'dog', the string 'truck', or a vowel\n", "truth regex": "~((dog)|(truck)|([AEIOUaeiou]))\n", "gpt3 inference regex": "^(?!.*dog)(?!.*truck)(?!.*[aeiou]).*$"}
{"index": 3813, "description": "lines containing words with string 'dog' and character\n", "truth regex": ".*\\b(dog)&(.)\\b.*\n", "gpt3 inference regex": "/\\b\\w*dog\\w*\\b/"}
{"index": 4033, "description": "lines with a character or a vowel before the string 'dog' in them\n", "truth regex": "((.)|([AEIOUaeiou])).*(dog).*\n", "gpt3 inference regex": "/[aeiouAEIOU]\\w*dog/"}
{"index": 7473, "description": "lines with a capital, 7 or more times before character\n", "truth regex": "(([A-Z]){7,}).*(.).*\n", "gpt3 inference regex": "^[A-Z]{7,}.*"}
{"index": 3667, "description": "The lines that have a letter coming before either a capital letter or the string 'dog'\n", "truth regex": "([A-Za-z]).*(([A-Z])|(dog)).*\n", "gpt3 inference regex": "^[a-z].*(?:[A-Z]|dog)"}
{"index": 1730, "description": "lines with words with the string 'dog', a character, and a vowel in them\n", "truth regex": "\\b(dog)&(.)&([AEIOUaeiou])\\b\n", "gpt3 inference regex": "\\b\\w*dog\\w*[aeiou]\\w*\\b"}
{"index": 8709, "description": "lines with string 'dog' before a lower-case letter, number, or capital letter\n", "truth regex": "(dog).*(([a-z])|([0-9])|([A-Z])).*\n", "gpt3 inference regex": "/dog[a-z0-9A-Z]/"}
{"index": 5567, "description": "lines with letter followed by vowel and containing string 'dog'\n", "truth regex": "([A-Za-z].*[AEIOUaeiou].*)&(.*dog.*)\n", "gpt3 inference regex": "^[a-zA-Z][aeiouAEIOU].*dog.*$"}
{"index": 6837, "description": "lines ending in 7 or more letters or vowels\n", "truth regex": "(.*)(([A-Za-z])|(([AEIOUaeiou]){7,}))\n", "gpt3 inference regex": "^(.*[aeiouAEIOU]{7,}|.{7,})$"}
{"index": 3812, "description": "lines with words and a letter and vowel\n", "truth regex": "\\b([A-Za-z])&([AEIOUaeiou])\\b\n", "gpt3 inference regex": "^[a-zA-Z]*[aeiouAEIOU][a-zA-Z]*$"}
{"index": 6740, "description": "Items with a numeral or 'dog' at least four times.\n", "truth regex": "(([0-9])|(dog)){4,}\n", "gpt3 inference regex": "(\\d|dog){4,}"}
{"index": 4676, "description": "lines having either the string 'dog', a letter, or the string 'truck' 'ring'\n", "truth regex": "((dog)|([A-Za-z])|(truck)).*(ring).*\n", "gpt3 inference regex": "/(dog|[a-zA-Z]|truck|ring)/"}
{"index": 1283, "description": "lines with words including a vowel, number, and letter\n", "truth regex": "\\b([AEIOUaeiou])&([0-9])&([A-Za-z])\\b\n", "gpt3 inference regex": "^(?=.*[aeiou])(?=.*\\d)(?=.*[a-zA-Z]).*$"}
{"index": 1455, "description": "lines starting with string 'dog' before a letter\n", "truth regex": "((dog)(.*)).*(~([A-Za-z])).*\n", "gpt3 inference regex": "^dog.*[a-zA-Z]"}
{"index": 5322, "description": "Lines not having letter, a character, or a number\n", "truth regex": "~(([A-Za-z])|(.)|([0-9]))\n", "gpt3 inference regex": "^[^a-zA-Z0-9]+$"}
{"index": 9792, "description": "lines ending in string 'dog' or capital letter\n", "truth regex": "(.*)(((dog)+)|([A-Z]))\n", "gpt3 inference regex": "/(dog|[A-Z])$/"}
{"index": 190, "description": "lines that have the word 'dog', a vowel, and the word 'truck'\n", "truth regex": "\\b(dog)&([AEIOUaeiou])&(truck)\\b\n", "gpt3 inference regex": "/(dog)[aeiou]*(truck)/"}
{"index": 4645, "description": "lines containing the string 'dog' before a vowel preceding a letter\n", "truth regex": "(dog).*([AEIOUaeiou].*[A-Za-z].*).*\n", "gpt3 inference regex": "/(?=.*dog)(?=.*[aeiou])[a-zA-Z]+/"}
{"index": 565, "description": "lines starting in 2 or more of the string 'dog' or 'truck'\n", "truth regex": "((dog)(.*))|((truck){2,})\n", "gpt3 inference regex": "^(dog|truck){2,}.*"}
{"index": 2501, "description": "lines with a character or the string 'dog' at least 7 times\n", "truth regex": ".*((.)|(dog)){7,}.*\n", "gpt3 inference regex": "^(.*(?:dog|.{7,})).*$"}
{"index": 9368, "description": "lines with a letter at least once and which are starting with the string 'dog'\n", "truth regex": "(([A-Za-z])+)&((dog)(.*))\n", "gpt3 inference regex": "^(dog.*[a-zA-Z])$"}
{"index": 48, "description": "lines that have a vowel preceded by the string 'dog' at least 6 times\n", "truth regex": "(dog.*[AEIOUaeiou].*){6,}\n", "gpt3 inference regex": "^(?=.*dog[aeiou].*dog[aeiou].*dog[aeiou].*dog[aeiou].*dog[aeiou].*dog[aeiou]).*$"}
{"index": 1611, "description": "lines with 4 or more of a number before a character\n", "truth regex": "([0-9].*..*){4,}\n", "gpt3 inference regex": "^\\d{4,}.*"}
{"index": 9482, "description": "lines containing the string 'dog' followed by the string 'truck'\n", "truth regex": "(dog).*(~((truck)*)).*\n", "gpt3 inference regex": "/(dog.*truck)/"}
{"index": 6821, "description": "Items with words a vowel preceding a small letter.\n", "truth regex": "\\b([AEIOUaeiou]).*([a-z]).*\\b\n", "gpt3 inference regex": "(?<=[aeiou])[a-z]"}
{"index": 2043, "description": "Items with an upper case letter, a letter, and a numeral.\n", "truth regex": ".*([A-Za-z])&([A-Z])&([0-9]).*\n", "gpt3 inference regex": "^[A-Z][a-zA-Z][0-9]$"}
{"index": 377, "description": "lines with 3 or more letters or the string 'dog'\n", "truth regex": "(([A-Z]){3,})|(.*dog.*)\n", "gpt3 inference regex": "^(?:[a-zA-Z]{3,}|dog)$"}
{"index": 4413, "description": "lines with a vowel or containing only the string 'dog' at least once in them\n", "truth regex": "(([AEIOUaeiou])|(dog))+\n", "gpt3 inference regex": "^(?=.*[aeiou])|^(?=.*dog).*$"}
{"index": 5607, "description": "lines that contain the string 'dog' or contain a number at least 6 times\n", "truth regex": "\\b(([0-9]){6,})&(dog)\\b\n", "gpt3 inference regex": "/(dog|\\d{6,})/"}
{"index": 4087, "description": "lines with lower case letters and a vowel before a letter\n", "truth regex": "(([a-z])&([AEIOUaeiou])).*([A-Za-z]).*\n", "gpt3 inference regex": "^[a-z]*[aeiou][a-z]*$"}
{"index": 6755, "description": "at least twice lines with a character after a vowel\n", "truth regex": "([AEIOUaeiou]).*((.){2,}).*\n", "gpt3 inference regex": "/(?=.*[aeiou].*[a-zA-Z])(?=.*[aeiou].*[a-zA-Z]).*/"}
{"index": 1495, "description": "Items with a character, 'dog', and small letter before 'truck'.\n", "truth regex": "((.)&(dog)&([a-z])).*(truck).*\n", "gpt3 inference regex": "[a-z]dog[a-z]truck"}
{"index": 2081, "description": "lines with 'dog' and a lower-case letter\n", "truth regex": "\\b([A-Za-z].*dog.*)&([a-z])\\b\n", "gpt3 inference regex": "/dog[a-z]/"}
{"index": 7612, "description": "lines not having a letter and not the string 'dog' or string 'truck'\n", "truth regex": "~(([A-Za-z])&((dog)|(truck)))\n", "gpt3 inference regex": "^(?!.*[a-zA-Z])(?!.*dog)(?!.*truck).*$"}
{"index": 2201, "description": "lines with a capital letter then a number and no 'dog'\n", "truth regex": "([A-Z].*[0-9].*)&(~(dog))\n", "gpt3 inference regex": "^[A-Z]\\d+(?!.*dog).*"}
{"index": 1382, "description": "lines with string 'dog', 4 or more times before letter\n", "truth regex": "((dog){4,}).*([A-Za-z]).*\n", "gpt3 inference regex": "/(dog){4,}.*[a-zA-Z]/"}
{"index": 8960, "description": "lines with a capital letter or 7 strings of 'dog'\n", "truth regex": "(([A-Z])|(dog)){7,}\n", "gpt3 inference regex": "^(?=.*[A-Z]|dog{7})"}
{"index": 4737, "description": "lines which have the string 'dog' at least once before a vowel\n", "truth regex": "((dog)+).*([AEIOUaeiou]).*\n", "gpt3 inference regex": "^(?=.*dog)[^aeiou]*[aeiou]"}
{"index": 6948, "description": "Items with a letter preceding 'dog' at least four times.\n", "truth regex": "([A-Za-z].*dog.*){4,}\n", "gpt3 inference regex": "^[a-zA-Z]{4,}dog"}
{"index": 3086, "description": "lines with the string 'dog' and number before a letter\n", "truth regex": "((dog)&([0-9])).*([A-Za-z]).*\n", "gpt3 inference regex": "/\\d+[a-zA-Z]*dog/"}
{"index": 4339, "description": "lines with a number, string 'dog', or vowel\n", "truth regex": ".*([0-9])|(dog)|([AEIOUaeiou]).*\n", "gpt3 inference regex": "^(?=.*\\d|dog|[aeiou]).*$"}
{"index": 8339, "description": "lines without a capital, a vowel, or number\n", "truth regex": "~(([A-Z])|([AEIOUaeiou])|([0-9]))\n", "gpt3 inference regex": "^[^A-Zaeiou0-9]+$"}
{"index": 6152, "description": "lines starting in zero or more of string 'dog' or 'truck'\n", "truth regex": "(((dog)|(truck))(.*))*\n", "gpt3 inference regex": "^(dog|truck)*"}
{"index": 5461, "description": "lines containing only a character, 3 or more times before capital letter\n", "truth regex": "((.){3,}).*([A-Z]).*\n", "gpt3 inference regex": "^[a-zA-Z]{3,}[A-Z]$"}
{"index": 7805, "description": "lines containing either character, a capital, or a letter\n", "truth regex": ".*(.)|([A-Z])|([A-Za-z]).*\n", "gpt3 inference regex": "^[A-Za-z]$"}
{"index": 5228, "description": "Items with a letter preceding an upper case letter preceding a character.\n", "truth regex": "([A-Za-z]).*([A-Z].*..*).*\n", "gpt3 inference regex": "^[a-zA-Z][A-Z][a-zA-Z]$"}
{"index": 2685, "description": "lines with a lower-case letter before 'dog'\n", "truth regex": "~(\\b([a-z]).*(dog).*\\b)\n", "gpt3 inference regex": "^[a-z]+dog"}
{"index": 5725, "description": "lines that start with the string \"dog\"\n", "truth regex": "((dog)*)(.*)\n", "gpt3 inference regex": "^dog.*"}
{"index": 8051, "description": "lines with the string 'dog'  or containing a vowel\n", "truth regex": "((dog)*)|(.*[AEIOUaeiou].*)\n", "gpt3 inference regex": "/(dog|[aeiou])/"}
